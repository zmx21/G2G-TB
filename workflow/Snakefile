from distutils.util import strtobool

configfile: "../config/config.yaml"
Mtb_IDS, = glob_wildcards(config["MTB_DATA"]+'Mtb_VCF_files/full_allpos/{id}.all.pos.vcf.gz')

rule all:
  input:
    results=config["RESULTS_DIR"]+"Burden_"+config["Burden"]+"_SIFT_"+config["SIFT"]+"_Del_"+config["Deletion"]+"_HomoOnly_"+config["Homo_Only"]+"/"+config["Reference_Panel"]+"/"+config["tool"]+"/PC_"+str(config["N_PC"])+"_pPC_"+str(config["N_pPC"])+"/results.rds"
    
rule process_mtb_VCF:
  input:
    VCF_file=config["MTB_DATA"]+'Mtb_VCF_files/full_allpos/{id}.all.pos.vcf.gz'
  output:
    homo_snps=config["MTB_DATA"]+'Mtb_VCF_files/full_allpos/{id}.var.homo.SNPs.vcf.gz',
    homo_het_snps=config["MTB_DATA"]+'Mtb_VCF_files/full_allpos/{id}.var.homo.het.SNPs.vcf.gz',
    missing_snps=config["MTB_DATA"]+'Mtb_VCF_files/full_allpos/{id}.missing',
    reads=config["MTB_DATA"]+'Mtb_VCF_files/full_allpos/{id}.reads.gz'
  threads:
    1
  shell:
    '''
      bcftools filter -i 'GT=="1/1"' -O z -o {output.homo_snps} {input.VCF_file} #Keep both homo calls only.
      bcftools index -t  {output.homo_snps}
            
      bcftools filter -i 'GT=="1/1" || GT=="0/1" || GT=="1/0"' -O z -o {output.homo_het_snps} {input.VCF_file} #Keep both homo and mixed calls.  
      bcftools index -t  {output.homo_het_snps}

      bcftools filter -i 'GT=="./."' {input.VCF_file} | bcftools query -f '%POS %REF %ALT\n' > {output.missing_snps} 
      bcftools query -f '%POS %REF %ALT [%AD] [%RD] [%SDP] [%DP] [%RBQ] [%ABQ] [%RDF] [%RDR] [%ADF] [%ADR] [%FREQ] [%GT] [%GQ]\n' {input.VCF_file} | pigz --fast > {output.reads}
    '''

rule merge_mtb_VCF:
  input:    
    homo_snps=expand(config["MTB_DATA"]+'Mtb_VCF_files/full_allpos/{id}.var.homo.SNPs.vcf.gz',id=Mtb_IDS),
    homo_het_snps=expand(config["MTB_DATA"]+'Mtb_VCF_files/full_allpos/{id}.var.homo.het.SNPs.vcf.gz',id=Mtb_IDS),
    locus_to_excl=config["MTB_DATA"]+'Locus_to_exclude_Mtb_Parsed.txt'
  output:
    homo_snps=config["MTB_DATA"]+'merged/merged.var.homo.SNPs.vcf',
    homo_het_snps=config["MTB_DATA"]+'merged/merged.var.homo.het.SNPs.vcf',
    homo_dosage=config["MTB_DATA"]+'merged/merged.var.homo.SNPs.vcf.dosage',
    homo_het_dosage=config["MTB_DATA"]+'merged/merged.var.homo.het.SNPs.vcf.dosage'
  threads:
    40
  shell:
    '''
      bcftools merge --threads {threads} -0 -m none {input.homo_snps} -O v -o {output.homo_snps}.tmp
      bedtools subtract -header -A -a {output.homo_snps}.tmp -b {input.locus_to_excl} > {output.homo_snps}
      bgzip -c {output.homo_snps} > {output.homo_snps}.gz
      bcftools index -t {output.homo_snps}.gz
      rm {output.homo_snps}.tmp
      bcftools +dosage {output.homo_snps}.gz > {output.homo_snps}.dosage
      
      bcftools merge --threads {threads} -0 -m none {input.homo_het_snps} -O v -o {output.homo_het_snps}.tmp
      bedtools subtract -header -A -a {output.homo_het_snps}.tmp -b {input.locus_to_excl} > {output.homo_het_snps}
      bgzip -c {output.homo_het_snps} > {output.homo_het_snps}.gz
      bcftools index -t {output.homo_het_snps}.gz
      rm {output.homo_het_snps}.tmp
      bcftools +dosage {output.homo_het_snps}.gz > {output.homo_het_snps}.dosage

    '''

rule get_missing_pos:
  input:
      gff='../data/Mtb/Mtb_VCF_files/GCF_000195955.2.gff',
      VCF_Files=expand(config["MTB_DATA"]+'Mtb_VCF_files/full_allpos/{id}.all.pos.vcf.gz',id=Mtb_IDS),
      missing_files=expand(config["MTB_DATA"]+'Mtb_VCF_files/full_allpos/{id}.missing',id=Mtb_IDS)
  params:
      out_dir=config["SCRATCH_DIR"]+'Mtb_Coverage/'
  output:
      missing_mat=config["SCRATCH_DIR"]+'Mtb_Coverage/missing_mat.rds'
  threads: 40
  shell:
      "Rscript ./scripts/GetCoverage.R {input.VCF_Files} {input.missing_files} {input.gff} {params.out_dir} {threads}"

def get_snp_path(wildcards):
  # return homo SNPs only
  if strtobool(config["Homo_Only"]):
      return config["MTB_DATA"]+'Mtb_VCF_files/full_allpos/{}.var.homo.SNPs.vcf.gz'.format(wildcards["id"])
  # return both homo and het snps
  else:
      return config["MTB_DATA"]+'Mtb_VCF_files/full_allpos/{}.var.homo.het.SNPs.vcf.gz'.format(wildcards["id"])

rule make_AA_Tbl:
  input:
    snps=get_snp_path,
    locus_to_excl=config["MTB_DATA"]+'Locus_to_exclude_Mtb_Parsed.txt'
  params:
    snpEff='../software/snpEff/SnpSift.jar'
  output:
    AA_variant=config["SCRATCH_DIR"]+'AA_HomoOnly_'+config["Homo_Only"]+'/{id}.txt',
    Syn_variant=config["SCRATCH_DIR"]+'Syn_HomoOnly_'+config["Homo_Only"]+'/{id}.txt'
  threads: 1
  shell:
    '''
        Rscript ./scripts/MakeAATable.R {input.snps} {input.locus_to_excl} {params.snpEff} {wildcards.id} {output.AA_variant} {output.Syn_variant}
    '''

rule make_AA_Matrix:
  input:
    missing_mat=config["SCRATCH_DIR"]+'Mtb_Coverage/missing_mat.rds',
    phylo_snps=config["MTB_DATA"]+'PositionsPhylogeneticSNPs_20171004.txt',
    sift_path=config["MTB_DATA"]+"SIFT/GCA_000195955.2.22/Chromosome.gz",
    AA_variant=expand(config["SCRATCH_DIR"]+'AA_HomoOnly_'+config["Homo_Only"]+'/{id}.txt',id=Mtb_IDS),
    Syn_variant=expand(config["SCRATCH_DIR"]+'Syn_HomoOnly_'+config["Homo_Only"]+'/{id}.txt',id=Mtb_IDS),
    del_tbl=config["MTB_DATA"]+'binary_table_genes_combined_genomes_022021.txt'
  params:
    IS_SIFT=bool(strtobool(config["SIFT"])),
    IS_Burden=bool(strtobool(config["Burden"])),
    IS_Deletion=bool(strtobool(config["Deletion"]))
  output:
    Mtb_Var_Tbl=config["SCRATCH_DIR"]+"Burden_"+config["Burden"]+"_SIFT_"+config["SIFT"]+"_Del_"+config["Deletion"]+"_HomoOnly_"+config["Homo_Only"]+"/Mtb_Var_Tbl.rds",
  threads: 40
  shell:
    "Rscript ./scripts/MakeVariantMatrix.R {input.AA_variant} {input.Syn_variant} {input.missing_mat} {input.phylo_snps} {input.del_tbl} {input.sift_path} {params.IS_SIFT} {params.IS_Burden} {params.IS_Deletion} {output.Mtb_Var_Tbl} {threads}"
    
    
    
def merged_dosage_path(wildcards):
  # return homo SNPs only
  if strtobool(config["Homo_Only"]):
      return config["MTB_DATA"]+'merged/merged.var.homo.SNPs.vcf.dosage'
  # return both homo and het snps
  else:
      return config["MTB_DATA"]+'merged/merged.var.homo.het.SNPs.vcf.dosage'

rule setup_host:
  input:
    host_vcf=config["host_vcf"],
    host_hla_vcf=config["HLA_Data"]+'chr6.dose.vcf.gz'
  params:
    Genotyping_DIR=config["Genotyping_DATA"],
    Pheno_DIR=config["Pheno_DATA"],
    Out_DIR=config["SCRATCH_DIR"]+config["Reference_Panel"]+'/',
    Host_MAF=config["Host_MAF"],
    X_Chr=config["X_Chr"],
    excl_region='../data/exclusion_regions_hg19.txt'
  output:
    config["SCRATCH_DIR"]+config["Reference_Panel"]+"/TB_DAR_Imputed_GWAS.bed",
    config["SCRATCH_DIR"]+config["Reference_Panel"]+"/TB_DAR_Imputed_GWAS.bim",
    config["SCRATCH_DIR"]+config["Reference_Panel"]+"/TB_DAR_Imputed_GWAS.fam",
  threads:23
  shell:
    "Rscript ./scripts/SetUpHost.R {params.Genotyping_DIR} {params.Pheno_DIR} {input.host_vcf} {input.host_hla_vcf} {params.Out_DIR} {params.excl_region} {params.Host_MAF} {params.X_Chr} {threads}"

rule setup_G2G:
  input:
    Mtb_Var_Tbl=config["SCRATCH_DIR"]+"Burden_"+config["Burden"]+"_SIFT_"+config["SIFT"]+"_Del_"+config["Deletion"]+"_HomoOnly_"+config["Homo_Only"]+"/Mtb_Var_Tbl.rds",
    merged_dosage=merged_dosage_path,
    host_bed=config["SCRATCH_DIR"]+config["Reference_Panel"]+"/TB_DAR_Imputed_GWAS.bed",
    host_bim=config["SCRATCH_DIR"]+config["Reference_Panel"]+"/TB_DAR_Imputed_GWAS.bim",
    host_fam=config["SCRATCH_DIR"]+config["Reference_Panel"]+"/TB_DAR_Imputed_GWAS.fam",
  params:
    Genotyping_DIR=config["Genotyping_DATA"],
    Pheno_DIR=config["Pheno_DATA"],
    Phylo_Tree_Path=config["MTB_DATA"]+'fasttree_TBDar_022021_1239',
    Reference_Panel=config["Reference_Panel"],
    Out_DIR=config["SCRATCH_DIR"]+"Burden_"+config["Burden"]+"_SIFT_"+config["SIFT"]+"_Del_"+config["Deletion"]+"_HomoOnly_"+config["Homo_Only"]+"/",
    Host_MAF=config["Host_MAF"],
    Pathogen_MAC_pPCA=config["Pathogen_MAC_pPCA"],
    Pathogen_MAC_AA_Lineage = config["Pathogen_MAC_AA_Lineage"],
    Pathogen_MAC_AA=config["Pathogen_MAC_AA"],
    host_dir=config["SCRATCH_DIR"]+config["Reference_Panel"]
  output:
    config["SCRATCH_DIR"]+"Burden_"+config["Burden"]+"_SIFT_"+config["SIFT"]+"_Del_"+config["Deletion"]+"_HomoOnly_"+config["Homo_Only"]+"/"+config["Reference_Panel"]+"/G2G_Obj.rds"
  threads:40
  shell:
    "Rscript ./scripts/SetUpG2G.R {params.Out_DIR} {params.Genotyping_DIR} {params.Pheno_DIR} {input.Mtb_Var_Tbl} {params.Phylo_Tree_Path} {input.merged_dosage} {params.Reference_Panel} {params.Host_MAF} {params.Pathogen_MAC_pPCA} {params.Pathogen_MAC_AA_Lineage} {params.Pathogen_MAC_AA} {params.host_dir} {threads}"
    
rule run_G2G:
  input:
    g2g_obj=config["SCRATCH_DIR"]+"Burden_"+config["Burden"]+"_SIFT_"+config["SIFT"]+"_Del_"+config["Deletion"]+"_HomoOnly_"+config["Homo_Only"]+"/"+config["Reference_Panel"]+"/G2G_Obj.rds"
  params:
    Reference_Panel=config["Reference_Panel"],
    tool=config["tool"],
    N_PC=config["N_PC"],
    N_pPC=config["N_pPC"],
    covars_to_incl=config["covars_to_incl"],
    X_Chr=config["X_Chr"],
    out_dir=config["RESULTS_DIR"]+"Burden_"+config["Burden"]+"_SIFT_"+config["SIFT"]+"_Del_"+config["Deletion"]+"_HomoOnly_"+config["Homo_Only"]+"/"+config["Reference_Panel"]
  output:
    results=config["RESULTS_DIR"]+"Burden_"+config["Burden"]+"_SIFT_"+config["SIFT"]+"_Del_"+config["Deletion"]+"_HomoOnly_"+config["Homo_Only"]+"/"+config["Reference_Panel"]+"/"+config["tool"]+"/PC_"+str(config["N_PC"])+"_pPC_"+str(config["N_pPC"])+"/results.rds"
  threads:
    23
  shell:
    " Rscript ./scripts/RunG2G.R {input.g2g_obj} {params.out_dir} {params.Reference_Panel} {params.tool} {params.N_PC} {params.N_pPC} {params.covars_to_incl} {params.X_Chr} {threads}"